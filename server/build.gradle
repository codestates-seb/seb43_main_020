plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.tdf'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'


repositories {
	mavenCentral()
}
ext {
	set('snippetsDir', file("build/generated-snippets"))
}

configurations {
	asciidoctorExtensions
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	//아마존 S3 연결설정
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'


	// QueryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"
	// dependency 마지막에 버전정보는 생략가능하나 해당 정보는 가운데 버전정보가 들어가기에 아래처럼 표현함
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // NoClassDefFoundError 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // NoClassDefFoundError 대응 코드

	implementation 'org.mapstruct:mapstruct:1.5.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'
	implementation 'com.google.code.gson:gson'
}

tasks.named('test') {
	outputs.dir snippetsDir //스니펫디렉토리경로
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	configurations "asciidoctorExtensions"
	inputs.dir snippetsDir
	dependsOn test
}


task copyDocument(type: Copy) {
	dependsOn asciidoctor
	println "asciidoctor output: ${asciidoctor.outputDir}"
	from file("${asciidoctor.outputDir}")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}


bootJar {
	dependsOn copyDocument
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}

}


// Querydsl 설정
// main 디렉토리 아래 generated 폴더 생성
// gradle build를 하면 build 폴더 하위에 생성, 후에 intelliJ build를 했을때 같은 경로에 같은 파일이 겹쳐 에러가 발생하는
// 것을 방지하기 위해 main 아래에 생성되도록 설정
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치 설정
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set에 QClass 위치 추가
sourceSets {
	main.java.srcDirs += [generated]
}

// gradle clean 시 해당 폴더 삭제
clean {
	delete file(generated)
}